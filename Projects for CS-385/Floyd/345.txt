#include <stdio.h>
#include <string.h>
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <cstring>
#include <istream>
#include <vector>
#include <iterator>
#include <algorithm>
#include <array>
#include <limits>


using namespace std;

int main(int argc, const char *argv[]) {

	vector<string> ALPHABET{"NULL", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};

	//Create INF
	long INF = numeric_limits<long>::max();

    // Make sure the right number of command line arguments exist.
    if (argc != 2) {
        cerr << "Usage: " << argv[0] << " <filename>" << endl;
        return 1;
    }
    // Create an ifstream object.
    ifstream input_file(argv[1]);
    // If it does not exist, print an error message.
    if (!input_file) {
        cerr << "Error: Cannot open file '" << argv[1] << "'." << endl;
        return 1;
    }
    // Add read errors to the list of exceptions the ifstream will handle.
    input_file.exceptions(ifstream::badbit);
    string line;
    istringstream iss;
    int m;
    try {
    	unsigned int line_number = 1;
        // Use getline to read in a line.
        // See http://www.cplusplus.com/reference/string/string/getline/
        while (getline(input_file, line)) {

        	//check for number of vertices
        	if (line_number == 1) {
        		iss.str(line);
        		if (!(iss >> m) || (m > 26 || m < 1)) {
        			cerr << "Error: Invalid number of vertices '" << iss.str() << "' on line " << line_number << "." << endl;
        			return 1;
        		}
        		++line_number;
        		continue;
        	}

        		istringstream iss(line);
        		vector<string> line_contents((istream_iterator<string>(iss)), istream_iterator<string>());


        		//If there is no problem with this line, then go ahead and intialize the long array in the HEAP
            	long** distanceMatrixArray = new long*[m];
            	for (int i = 0; i < m; i++) {
            		distanceMatrixArray[i] = new long[m];
            	}

        		//Fill this 2d array with INF
        		for (int i = 0; i < m; i++) {
        			for (int j = 0; j < m; j++) {
        		        distanceMatrixArray[i][j] = INF;
        		      	}
        		}

        		 //Fill in zeroes in the diagonal for the array from before
        		 for (int i = 0; i < m; i++) {
        			 	distanceMatrixArray[i][i] = 0;
        		 }


        		if (line_contents.size() < 3) {
        		    cerr << "Error: Invalid edge data '" << line << "' on line " << line_number << "." << endl;
        		    for (int i = 0; i < m; i++) {
        		    	delete [] distanceMatrixArray[i];
        		    }
        		    delete[] distanceMatrixArray;
        		    return 1;
        		}

        		//check for correct naming of vertices using alphabet vector
        		vector<string> alphabet_valid{"NULL"};
        		for (int i = 1; i <= m; i++) {
        			alphabet_valid.push_back(ALPHABET[i]);
        		}

        		//checking for starting vertex
        		for (unsigned int k = 1; k < alphabet_valid.size(); k++) {
        			if (k == alphabet_valid.size()-1 && (line_contents[0].compare(alphabet_valid[k]) != 0)) {
        				cerr << "Error: Starting vertex '" << line_contents[0] << "' on line " << line_number << " is not among valid values " << alphabet_valid[1] << "-" << alphabet_valid.back() << "." << endl;
        				for (int i = 0; i < m; i++) {
        					delete [] distanceMatrixArray[i];
        				}
        				delete[] distanceMatrixArray;
        				return 1;
        			}
        			if (alphabet_valid[k].compare(line_contents[0]) == 0) {
        				break;
        			}
        			if (alphabet_valid[k].compare(line_contents[0]) != 0) {
        				continue;
        			}
        		}

        		//checking for ending vertex
        		for (unsigned int k = 1; k < alphabet_valid.size(); k++) {
        			if (k == alphabet_valid.size()-1 && (line_contents[1].compare(alphabet_valid[k]) != 0)) {
        				cerr << "Error: Ending vertex '" << line_contents[1] << "' on line " << line_number << " is not among valid values " << alphabet_valid[1] << "-" << alphabet_valid.back() << "." << endl;
        				for (int i = 0; i < m; i++) {
        				   delete [] distanceMatrixArray[i];
        				}
        				delete[] distanceMatrixArray;
        				return 1;
        			}
        			if (alphabet_valid[k].compare(line_contents[1]) == 0) {
        				break;
        			}
        			if (alphabet_valid[k].compare(line_contents[1]) != 0) {
        				continue;
        			}

        		}

        		//check the edge weight is a positive integer
        		istringstream iss2;
        		iss2.str(line_contents[2]);
        		int n;
        		if (!(iss2 >> n) || (n < 1)) {
        			cerr << "Error: Invalid edge weight '" << iss2.str() << "' on line " << line_number << "." << endl;
        			for (int i = 0; i < m; i++) {
        				delete [] distanceMatrixArray[i];
          		    }
        			delete[] distanceMatrixArray;
        			return 1;
        		}


        	//If everything is correct, we have an array with 0's in diagonal, and INF all the rest. Let's edit that and input our line contents
        	//TODO


        	//cout << line_number << ":\t" << line << endl;
        	++line_number;
        }

        // Don't forget to close the file.
        input_file.close();
    } catch (const ifstream::failure &f) {
        cerr << "Error: An I/O error occurred reading '" << argv[1] << "'.";
        return 1;
    }



    return 0;
}



